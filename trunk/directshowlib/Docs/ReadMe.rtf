{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f36\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f202\froman\fcharset238\fprq2 Times New Roman CE;}{\f203\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f205\froman\fcharset161\fprq2 Times New Roman Greek;}{\f206\froman\fcharset162\fprq2 Times New Roman Tur;}{\f207\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f208\froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f209\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f210\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f212\fswiss\fcharset238\fprq2 Arial CE;}{\f213\fswiss\fcharset204\fprq2 Arial Cyr;}{\f215\fswiss\fcharset161\fprq2 Arial Greek;}
{\f216\fswiss\fcharset162\fprq2 Arial Tur;}{\f217\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f218\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f219\fswiss\fcharset186\fprq2 Arial Baltic;}{\f220\fswiss\fcharset163\fprq2 Arial (Vietnamese);}
{\f222\fmodern\fcharset238\fprq1 Courier New CE;}{\f223\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f225\fmodern\fcharset161\fprq1 Courier New Greek;}{\f226\fmodern\fcharset162\fprq1 Courier New Tur;}
{\f227\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f228\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f229\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f230\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}
{\f562\fswiss\fcharset238\fprq2 Tahoma CE;}{\f563\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f565\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f566\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f567\fswiss\fcharset177\fprq2 Tahoma (Hebrew);}
{\f568\fswiss\fcharset178\fprq2 Tahoma (Arabic);}{\f569\fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f570\fswiss\fcharset163\fprq2 Tahoma (Vietnamese);}{\f571\fswiss\fcharset222\fprq2 Tahoma (Thai);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;
\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;
\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{
\s1\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\f1\fs32\lang1033\langfe1033\kerning32\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \styrsid10703373 heading 1;}{
\s2\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\i\f1\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \styrsid10703373 heading 2;}{
\s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \styrsid10703373 heading 3;}{\*\cs10 \additive \ssemihidden 
Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{\*\cs15 \additive \ul\cf2 \sbasedon10 \styrsid12675304 Hyperlink;}{
\s16\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f36\fs16\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext16 \ssemihidden \styrsid12326379 Balloon Text;}}{\*\latentstyles\lsdstimax156\lsdlockeddef0}
{\*\rsidtbl \rsid7643\rsid32378\rsid89361\rsid283711\rsid1201736\rsid1408106\rsid1444791\rsid1791669\rsid1904095\rsid2367862\rsid2432963\rsid2443813\rsid2497976\rsid2643707\rsid2652793\rsid2829749\rsid2845617\rsid3086748\rsid3099116\rsid3149574
\rsid3160347\rsid3218881\rsid3435944\rsid3476935\rsid3877049\rsid3885712\rsid5074900\rsid5184116\rsid5450346\rsid5571757\rsid5781541\rsid6037321\rsid6041525\rsid6320072\rsid6509737\rsid6562733\rsid6585317\rsid6624400\rsid6706447\rsid6771254\rsid7427807
\rsid7486901\rsid7563147\rsid7614624\rsid7686316\rsid7876934\rsid7887376\rsid8158488\rsid8471209\rsid8551083\rsid8872195\rsid8940148\rsid8983329\rsid9324333\rsid9589650\rsid9853054\rsid10027817\rsid10515867\rsid10703373\rsid10833686\rsid10834977
\rsid10842059\rsid10968082\rsid11018642\rsid11559080\rsid11603567\rsid11808738\rsid11948210\rsid12003006\rsid12326379\rsid12477343\rsid12480469\rsid12675304\rsid12737063\rsid12913132\rsid13316648\rsid13446123\rsid14309294\rsid14573838\rsid14746123
\rsid15220984\rsid15286429\rsid15363971\rsid15543112\rsid15741723\rsid15932462\rsid15950545\rsid16277176\rsid16410145\rsid16450858\rsid16592294}{\*\generator Microsoft Word 11.0.6502;}{\info{\title DirectShowLib Version 1}{\author David Wohlferd}
{\operator David Wohlferd}{\creatim\yr2005\mo6\dy17\hr16\min11}{\revtim\yr2005\mo8\dy28\hr3\min5}{\version28}{\edmins105}{\nofpages7}{\nofwords2963}{\nofchars16891}{\*\company Personal Copy}{\nofcharsws19815}{\vern24579}}
\widowctrl\ftnbj\aenddoc\revisions\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind4\viewscale100\nolnhtadjtbl\rsidroot2845617 \fet0\sectd 
\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}
{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain 
\s1\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs32\lang1033\langfe1033\kerning32\cgrid\langnp1033\langfenp1033 {\insrsid5450346\charrsid3885712 DirectShowLib Version 1.}{
\insrsid7614624 1}{\insrsid5450346\charrsid3885712 
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid5450346 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid5450346\charrsid3885712 
\par Version 1.}{\f1\fs20\insrsid7614624 1}{\f1\fs20\insrsid7614624\charrsid3885712  }{\f1\fs20\insrsid5450346\charrsid3885712 of the DirectShowLib library is the result of work done by:
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid5450346 {\f1\fs20\insrsid5450346\charrsid3885712 David Wohlferd (}{\field\flddirty{\*\fldinst {\f1\fs20\insrsid5450346\charrsid3885712  HYPERLINK "mailto:snarfle@users.SourceForge.net" }{
\f1\fs20\insrsid16410145\charrsid3885712 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000001e00000073006e006100720066006c0065004000750073006500720073002e0053006f00750072006300650046006f007200670065002e006e00650074000000e0c9ea79f9bace118c8200aa004ba90b4a0000006d00610069006c0074006f003a0073006e00
6100720066006c0065004000750073006500720073002e0053006f00750072006300650046006f007200670065002e006e006500740000000000000000000000000000000000}}}{\fldrslt {\cs15\f1\fs20\ul\cf2\insrsid5450346\charrsid3885712 snarfle@users.SourceForge.net}}}{
\f1\fs20\insrsid5450346\charrsid3885712 )
\par }{\f1\fs20\insrsid7686316\charrsid3885712 Eric Nowinski}{\f1\fs20\insrsid5450346\charrsid3885712  (}{\field\flddirty{\*\fldinst {\f1\fs20\insrsid5450346\charrsid3885712  HYPERLINK "mailto:nowinskie@users.SourceForge.net" }{
\f1\fs20\insrsid16410145\charrsid3885712 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000017000000200000006e006f00770069006e0073006b00690065004000750073006500720073002e0053006f00750072006300650046006f007200670065002e006e00650074000000e0c9ea79f9bace118c8200aa004ba90b4e0000006d00610069006c0074006f003a00
6e006f00770069006e0073006b00690065004000750073006500720073002e0053006f00750072006300650046006f007200670065002e006e006500740000000000000000000000000000000000}}}{\fldrslt {\cs15\f1\fs20\ul\cf2\insrsid5450346\charrsid3885712 nowinskie@users.SourceForge.net}
}}{\f1\fs20\insrsid5450346\charrsid3885712 )}{\f1\fs20\insrsid5450346 
\par }{\f1\fs20\insrsid12326379\charrsid12326379 \'d8ystein Hansen}{\f1\fs20\insrsid12326379  (}{\f1\fs20\insrsid7614624\charrsid7614624 oohansen@users.sourceforge.net}{\f1\fs20\insrsid7614624 )}{\f1\fs20\insrsid12326379\charrsid7614624 
\par }\pard \ql \li0\ri0\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid5450346 {\f1\fs20\insrsid5450346\charrsid3885712 Ka-Wai Chan (}{\field\flddirty{\*\fldinst {\f1\fs20\insrsid5450346\charrsid3885712  HYPERLINK "mailto:kawaic@users.SourceForge.net" }{
\f1\fs20\insrsid16410145\charrsid3885712 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000001d0000006b00610077006100690063004000750073006500720073002e0053006f00750072006300650046006f007200670065002e006e00650074000000e0c9ea79f9bace118c8200aa004ba90b480000006d00610069006c0074006f003a006b0061007700
6100690063004000750073006500720073002e0053006f00750072006300650046006f007200670065002e006e006500740000000000000000000000000000000000}}}{\fldrslt {\cs15\f1\fs20\ul\cf2\insrsid5450346\charrsid3885712 kawaic@users.SourceForge.net}}}{
\f1\fs20\insrsid5450346\charrsid3885712 )}{\f1\fs20\insrsid5450346 
\par }{\f1\fs20\insrsid2367862 
\par See WhatsNew.txt for a list of what has changed since the previous version.}{\f1\fs20\insrsid2367862\charrsid3885712 
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2845617\charrsid3885712 
Purpose of this library - What it is, what it isn't
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid9853054\charrsid3885712 Microsoft\rquote s }{\f1\fs20\insrsid15741723\charrsid3885712 managed }{
\f1\fs20\insrsid9853054\charrsid3885712 solution to allowing access to DirectShow from .NET isn\rquote t nearly as complete as the 
DirectShow interfaces for C++.  For developers who want the complete range of functionality of DirectShow in .NET, this library provides the enums, structs, and interface definitions to access them.
\par Reviewing the source code will show that there is very little executable code}{\f1\fs20\insrsid15741723\charrsid3885712  in this library}{\f1\fs20\insrsid9853054\charrsid3885712 
.  There are a few helper functions (mostly in DsUtils.cs), but everything else in the library is just definitions.
\par }{\f1\fs20\insrsid12477343\charrsid3885712 Although there are ~}{\f1\fs20\insrsid12326379\charrsid3885712 3}{\f1\fs20\insrsid12326379 6}{\f1\fs20\insrsid12326379\charrsid3885712 0 }{\f1\fs20\insrsid12477343\charrsid3885712 
interfaces defined in the source code, only }{\f1\fs20\insrsid2367862 some}{\f1\fs20\insrsid12326379\charrsid3885712  }{\f1\fs20\insrsid12477343\charrsid3885712 of them have been tested to ensure that they are working (see \'93}
{\field\flddirty{\*\fldinst {\f1\fs20\insrsid6706447\charrsid3885712  REF _Ref106788191 \\h }{\f1\fs20\insrsid16410145\charrsid3885712 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0052006500660031003000360037003800380031003900310000000000000000000000000000}}{\f1\fs20\insrsid3885712\charrsid3885712  \\* MERGEFORMAT }}{\fldrslt {\f1\fs20\insrsid6706447\charrsid3885712 
Using untested interfaces}}}{\f1\fs20\insrsid12477343\charrsid3885712 \'94 and \'93}{\field\flddirty{\*\fldinst {\f1\fs20\insrsid6706447\charrsid3885712  REF _Ref106788227 \\h }{\f1\fs20\insrsid16410145\charrsid3885712 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0052006500660031003000360037003800380032003200370000000000000000000000000000}}{\f1\fs20\insrsid3885712\charrsid3885712  \\* MERGEFORMAT }}{\fldrslt {\f1\fs20\insrsid6706447\charrsid3885712 
The plan for additional interfaces}}}{\f1\fs20\insrsid12477343\charrsid3885712 \'94 below).  The list of interfaces indicating which ones have been tested can be found at interaces.txt.
\par }{\f1\fs20\insrsid9853054\charrsid3885712 In addition to the library, a number of samples are provided showing how to use the library to accomplish general purpose tasks.
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid15741723\charrsid3885712 Licensing
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid15741723 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid15741723\charrsid3885712 This library is licensed under }{
\f1\fs20\insrsid7427807\charrsid3885712 GNU LESSER GENERAL PUBLIC LICENSE}{\f1\fs20\insrsid15741723\charrsid3885712 , }{\f1\fs20\insrsid7427807\charrsid3885712 Version 2.1}{\f1\fs20\insrsid15741723\charrsid3885712 .}{
\f1\fs20\insrsid7427807\charrsid3885712   See license.txt for the complete text.}{\f1\fs20\insrsid15741723\charrsid3885712 
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10834977\charrsid3885712 
Microsoft's plans for DirectShow
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid10834977 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid10834977\charrsid3885712 
There was some concern for a while that DirectShow was dead, since it had been moved out of the DirectX SDK.  However, it was }{\f1\fs20\insrsid6771254\charrsid3885712 only }{\f1\fs20\insrsid10834977\charrsid3885712 
being moved to the Platform SDK.  Current versions of the Platform SDK include the Direct Show samples, headers, etc.
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2845617\charrsid3885712 
Supported platforms, languages}{\fs20\insrsid2845617\charrsid3885712 
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid2845617\charrsid3885712 This library is usable from C# and VB.NET, and should work from other 
.NET compatible languages.  It was tested against DirectX version 9.0c on Windows XP}{\f1\fs20\insrsid9853054\charrsid3885712  using the 1.1 .NET framework}{\f1\fs20\insrsid2845617\charrsid3885712 
.  While the library itself should work on earlier versions of DirectX, some of the interfaces defined in the library w}{\f1\fs20\insrsid9853054\charrsid3885712 ere not introduced until }{\f1\fs20\insrsid6771254\charrsid3885712 DirectX  }{
\f1\fs20\insrsid9853054\charrsid3885712 v9.0.}{\f1\insrsid2845617\charrsid3885712 
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2845617\charrsid3885712 
{\*\bkmkstart _Ref106788285}Where to find the documentation}{\fs20\insrsid2845617\charrsid3885712 {\*\bkmkend _Ref106788285}
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid2845617\charrsid3885712 
Since the purpose of this library is to allow for the calling of the DirectShow interfaces, the primary source of documentation is MSDN.  You can find DirectShow documentation (today at least) at }{\field\flddirty{\*\fldinst {
\f1\fs20\insrsid3099116\charrsid3885712  HYPERLINK "http://msdn.microsoft.com/library/default.asp?url=/library/en-us/directshow/htm/directshow.asp" }{\f1\fs20\insrsid16410145\charrsid3885712 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90bbe00000068007400740070003a002f002f006d00730064006e002e006d006900630072006f0073006f00660074002e0063006f006d002f006c006900620072006100720079002f00640065006600610075006c007400
2e006100730070003f00750072006c003d002f006c006900620072006100720079002f0065006e002d00750073002f00640069007200650063007400730068006f0077002f00680074006d002f00640069007200650063007400730068006f0077002e0061007300700000000000dd0000000000000000000000000000}}
}{\fldrslt {\cs15\f1\fs20\ul\cf2\insrsid2845617\charrsid3885712 http://msdn.microsoft.com/library/default.asp?url=/library/en-us/directshow/htm/directshow.asp}}}{\f1\fs20\insrsid2845617\charrsid3885712 .  The interfaces are documented in the }{
\f1\fs20\insrsid9853054\charrsid3885712 \'93DirectShow }{\f1\fs20\insrsid2845617\charrsid3885712 Reference}{\f1\fs20\insrsid9853054\charrsid3885712 \'94 section, and general discussions of how DirectShow works can be found in the \'93About DirectShow\'94
  section}{\f1\fs20\insrsid6771254\charrsid3885712  of that page}{\f1\fs20\insrsid9853054\charrsid3885712 .}{\f1\fs20\insrsid2845617\charrsid3885712 
\par }{\f1\fs20\insrsid9853054\charrsid3885712 The few helper classes we have added are documented below in }{\f1\fs20\insrsid7887376\charrsid3885712 \'93}{\field\flddirty{\*\fldinst {\f1\fs20\insrsid6706447\charrsid3885712  REF _Ref106788262 \\h }{
\f1\fs20\insrsid16410145\charrsid3885712 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0052006500660031003000360037003800380032003600320000000000000000000000000000}}{\f1\fs20\insrsid3885712\charrsid3885712  \\* MERGEFORMAT }
}{\fldrslt {\f1\fs20\insrsid6706447\charrsid3885712 Helper Classes}}}{\f1\fs20\insrsid7887376\charrsid3885712 \'94}{\f1\fs20\insrsid9853054\charrsid3885712 .}{\f1\fs20\insrsid2845617\charrsid3885712 
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2845617\charrsid3885712 
Differences between MSDN docs and using our library
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid16277176\charrsid3885712 
It most cases, you should expect that you call the interface methods the same way MSDN says it should be called.  }{\f1\fs20\insrsid2845617\charrsid3885712 The primary differences between our definitions and those found on MSD
N are places where MSDN documents methods returning an int, but then say}{\f1\fs20\insrsid16277176\charrsid3885712 s}{\f1\fs20\insrsid2845617\charrsid3885712  the content of the int is some enum.  We change the definition to be the enum.  
\par }{\f1\fs20\insrsid9853054\charrsid3885712 The names of the structures and enum have been changed to use a more .NET friendly style: AM_SAMPLE2_PROPERTIES -> AMSample2Properties}{\f1\fs20\insrsid1408106\charrsid3885712 
.  Note that the original C++ structure or enum name is provided in comments above the declaration.  If there is some specific declaration you need to find, do a scan of the }{\f1\fs20\insrsid16277176\charrsid3885712 library\rquote s }{
\f1\fs20\insrsid1408106\charrsid3885712 source file}{\f1\fs20\insrsid16277176\charrsid3885712 s}{\f1\fs20\insrsid1408106\charrsid3885712  for the name.}{\f1\fs20\insrsid9853054\charrsid3885712 
\par }{\f1\fs20\insrsid5571757\charrsid3885712 Additionally, there are a number of DirectShow interfaces that allow a NULL to be passed as a parameter.  When the parameter is a }{\f1\fs20\insrsid7643\charrsid3885712 class}{
\f1\fs20\insrsid5571757\charrsid3885712  or an interface, this doesn\rquote t present a problem.  However, there are also places that use long or Guid.  To allow for the passing of
 NULL, wrapper classes have been created named DsLong and DsGuid.  These classes do nothing except hold the value, and provide conversion functions.}{\f1\fs20\insrsid9853054\charrsid3885712 
\par }{\f1\fs20\insrsid7887376\charrsid3885712 Also see the sections below on \'93}{\field\flddirty{\*\fldinst {\f1\fs20\insrsid6706447\charrsid3885712  REF _Ref106788322 \\h }{\f1\fs20\insrsid16410145\charrsid3885712 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0052006500660031003000360037003800380033003200320000000000000000000000000000}}{\f1\fs20\insrsid3885712\charrsid3885712  \\* MERGEFORMAT }}{\fldrslt {\f1\fs20\insrsid6706447\charrsid3885712 
How and when to use Marshal.ReleaseComObject()}}}{\f1\fs20\insrsid7887376\charrsid3885712 \'94 and \'93}{\field\flddirty{\*\fldinst {\f1\fs20\insrsid6706447\charrsid3885712  REF _Ref106788341 \\h }{\f1\fs20\insrsid16410145\charrsid3885712 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0052006500660031003000360037003800380033003400310000000000000000000000000000}}{\f1\fs20\insrsid3885712\charrsid3885712  \\* MERGEFORMAT }}{\fldrslt {\f1\fs20\insrsid6706447\charrsid3885712 
Releasing memory to avoid leaks (Marshal.FreeCoTaskMem, FreeAMMediaType, FreePinInfo)}}}{\f1\insrsid7887376\charrsid3885712 \'94
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid12675304\charrsid3885712 
How Visual Basic is different
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid12675304\charrsid3885712 Mostly, it isn\rquote 
t (different).  There is a sample that is a direct translation of a c#}{\f1\fs20\insrsid8551083\charrsid3885712  program that uses this library (DxLogoVB).  Other than the standard \'93remove the semi-colons, and change }{
\f1\fs20\insrsid14746123\charrsid3885712 \lquote }{\f1\fs20\insrsid8551083\charrsid3885712 int iSize}{\f1\fs20\insrsid14746123\charrsid3885712 \rquote }{\f1\fs20\insrsid8551083\charrsid3885712  to }{\f1\fs20\insrsid14746123\charrsid3885712 \lquote }{
\f1\fs20\insrsid8551083\charrsid3885712 Dim iSize as int}{\f1\fs20\insrsid14746123\charrsid3885712 \rquote , etc.}{\f1\fs20\insrsid8551083\charrsid3885712 \'94, there wasn\rquote t much to this conversion.  
One thing to be aware of is that while c# will perform some automatic conversions, in VB, }{\f1\fs20\insrsid10834977\charrsid3885712 they}{\f1\fs20\insrsid8551083\charrsid3885712 
 must be done manually.  For example, the AddFilter method is implemented on the IFilterGraph method, and is therefore available on the derived classes (such as IFilterGraph2).  In c#, you can do:}{\fs20\insrsid12675304\charrsid3885712 
\par }\pard \ql \fi360\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid3885712 {\f2\fs20\insrsid8551083\charrsid3885712 IFilterGraph2 m_graphBuilder;
\par // <Build the graph>
\par             hr = m_graphBuilder.AddFilter(baseGrabFlt, "Ds.NET Grabber");
\par }\pard \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\insrsid8551083\charrsid3885712 However, in VB, you get a compile error }{\f1\fs20\insrsid12326379 (Ambiguous reference) }{\f1\fs20\insrsid8551083\charrsid3885712 
on the AddFilter call, since it doesn\rquote t know which version of .AddFilter to use, the one from the parent class, or the one from the derived class.  This can be resolved with code like this:
\par }{\f2\fs20\insrsid3877049    }{\f2\fs20\insrsid8551083\charrsid3885712 hr = CType(m_graphBuilder, IGraphBuilder).AddFilter(baseGrabFlt, "Ds.NET Grabber")
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2845617 {\*\bkmkstart _Ref106788322}
How and when to use Marshal.ReleaseComObject(){\*\bkmkend _Ref106788322}
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid2845617 .NET has a built-in limitation when handling COM methods.  }{\f1\fs20\insrsid5571757 
This problem affects any .NET class calling COM, not just our library.  }{\f1\fs20\insrsid2845617 The problem }{\f1\fs20\insrsid14746123 description }{\f1\fs20\insrsid2845617 is }{\f1\fs20\insrsid14746123 rather }{\f1\fs20\insrsid2845617 
involved, but boils down to two }{\f1\fs20\insrsid14746123 key }{\f1\fs20\insrsid2845617 facts:
\par 1) Objects in .NET aren't released as soon as they go out of scope.  You have to wait for the }{\f1\fs20\insrsid10834977 G}{\f1\fs20\insrsid2845617 arbage }{\f1\fs20\insrsid10834977 C}{\f1\fs20\insrsid2845617 
ollector to free them.  As a result, you may get "in use" errors for items you thought should be released.  GC.Collect may help}{\f1\fs20\insrsid14746123  with this}{\f1\fs20\insrsid2845617 .  A
lso, you can use Marshal.ReleaseComObject.  However, that may introduce other problems (see #2).
\par 2) If you create a }{\f1\fs20\insrsid3099116 COM}{\f1\fs20\insrsid2845617  object, then do 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid14746123 {\f2\fs20\insrsid14746123\charrsid3885712 IGraphBuilder  graphBuilder = (IGraphBuilder) new FilterGraph();
\par IMediaControl  imc}{\f2\fs20\insrsid2845617\charrsid3885712  = }{\f2\fs20\insrsid14746123\charrsid3885712 graphBuilder}{\f2\fs20\insrsid2845617\charrsid3885712  as }{\f2\fs20\insrsid14746123\charrsid3885712 IMediaControl}{
\f2\fs20\insrsid2845617\charrsid3885712 ;
\par }\pard \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\insrsid2845617 Calling Marshal.ReleaseComObject on either }{\f1\fs20\insrsid14746123\charrsid14746123 graphBuilder }{\f1\fs20\insrsid2845617 or }{\f1\fs20\insrsid14746123 imc }{
\f1\fs20\insrsid2845617 will invalidate BOTH }{\f1\fs20\insrsid14746123\charrsid14746123 graphBuilder }{\f1\fs20\insrsid2845617 and }{\f1\fs20\insrsid14746123 imc}{\f1\fs20\insrsid2845617 .  For a good article on this, }{\f1\fs20\insrsid10834977 read }{
\f1\fs20\insrsid2845617 Chris Brumme's weblog at }{\field{\*\fldinst {\f1\fs20\insrsid10834977  HYPERLINK "http://blogs.msdn.com/cbrumme/archive/2003/04/16/51355.aspx" }{\f1\fs20\insrsid16410145\charrsid10834977 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b7800000068007400740070003a002f002f0062006c006f00670073002e006d00730064006e002e0063006f006d002f0063006200720075006d006d0065002f0061007200630068006900760065002f00320030003000
33002f00300034002f00310036002f00350031003300350035002e00610073007000780000000000000000000000000000000400000000}}}{\fldrslt {\cs15\f1\fs20\ul\cf2\insrsid2845617\charrsid10834977 http://blogs.msdn.com/cbrumme/archive/2003/04/16/51355.aspx}}}{
\f1\fs20\insrsid2845617 .
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2845617 {\*\bkmkstart _Ref106788341}
Releasing memory to avoid leaks (Marshal.FreeCoTaskMem, FreeAMMediaType, FreePinInfo){\*\bkmkend _Ref106788341}
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid2845617 
Some of the interfaces in DirectShow allocate memory that needs to be released by the caller.  Make sure you read the }{\f1\fs20\insrsid5571757 MSDN }{\f1\fs20\insrsid2845617 
docs for any methods you are calling to ensure that you know when you are required to release memory.  Be aware that memory allocated by COM objects isn't automatically freed }{\f1\fs20\insrsid5571757 by the Garbage Collector }{\f1\fs20\insrsid2845617 
like memory allocated for you by most .NET functions.
\par Some specific examples of methods that require you to free memory, along with the excerpt from the MSDN docs that lets you know }{\f1\fs20\insrsid7563147 how the }{\f1\fs20\insrsid2845617 memory must be freed.}{\f1\fs20\insrsid7563147 
  For each example, the .NET equivalent method is described.}{\f1\fs20\insrsid2845617 
\par IOverlay::GetClipList: }{\i\insrsid2845617 If successful, the Microsoft\'ae Win32\'ae }{\b\i\insrsid2845617 CoTaskMemFree}{\i\insrsid2845617  function should free memory.}{\insrsid2845617  }{\f1\fs20\insrsid2845617\charrsid3885712 
Use Marshal.FreeCoTaskMem to release this memory.
\par IMediaSample::GetMediaType:}{\insrsid2845617  }{\i\insrsid2845617 When you are done with the media type, free the memory block by calling the }{\field{\*\fldinst {\b\i\fs20\insrsid2845617 HYPERLINK "deletemediatype.htm"}{
\b\i\fs20\insrsid16410145\charrsid10703373 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000001000000e0c9ea79f9bace118c8200aa004ba90b6600000053006f00750072006300650046006f007200670065002f00640069007200650063007400730068006f0077006c00690062002f0044006f00630073002f00640065006c006500740065006d00650064006900
610074007900700065002e00680074006d000000000000000000000000000000}}}{\fldrslt {\i\fs20\insrsid2845617 DeleteMediaType}}}{\i\fs20\insrsid2845617\charrsid2829749  }{\i\insrsid2845617\charrsid2829749 utility function.}{\insrsid2845617\charrsid2829749   }{
\f1\fs20\insrsid2845617\charrsid3885712 Use DsUtils.FreeAMMediaType() to free this object.}{\insrsid2845617\charrsid2829749 
\par }{\f1\insrsid2845617\charrsid3885712 IPin::QueryPinInfo:}{\insrsid2845617\charrsid2829749  }{\i\insrsid2845617\charrsid2829749 
if the pFilter member of the PIN_INFO structure is non-NULL, it has an outstanding reference count. Be sure to release the interface when you are done.}{\insrsid2845617\charrsid2829749   }{\f1\fs20\insrsid2845617\charrsid3885712 
Use DsUtils.FreePinInfo() to free this object.}{\f1\fs20\insrsid2845617 
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6585317 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid6585317\charrsid6585317 
About the differences between Direct3D and Managed Direct3D
\par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid6585317 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid6585317\charrsid2443813 The docs directory contains
 a document describing mixing using Microsoft\rquote s managed DirectX classes with the interfaces in this library.  It is named \'93Mixing Unmanaged & Managed Direct3D.rtf\'94.}{\f1\fs20\insrsid6585317\charrsid2443813 
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid7887376\charrsid1408106 
{\*\bkmkstart _Ref106788262}Helper Classes{\*\bkmkend _Ref106788262}
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid7887376 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid7887376 
While the library primarily just provides mappings to the DirectShow interfaces, there are a few helper functions we have added that may be useful:
\par }{\b\f1\fs20\insrsid7887376\charrsid32378 DsGuid}{\f1\fs20\insrsid7887376  \endash  This class is a wrapping for Guid.  There are a number of interfaces in DirectShow that allow you to pass a null to a parameter that accepts a Guid (for example }{
\f1\fs20\insrsid7887376\charrsid8158488 ICaptureGraphBuilder2}{\f1\fs20\insrsid7887376 .}{\insrsid7887376\charrsid8158488  }{\f1\fs20\insrsid7887376\charrsid8158488 FindInterface}{\f1\fs20\insrsid7887376 
).  However, since the .NET implementation of Guid derives from System.ValueType, you can\rquote t pass a null to a parameter declared }{\f1\fs20\insrsid7563147 as }{\f1\fs20\insrsid7887376 
Guid.  This class does nothing except construct using a Guid, and convert between Guid and DsGuid.
\par }{\b\f1\fs20\insrsid7887376\charrsid32378 DsLong}{\f1\fs20\insrsid7887376  \endash  As with DsGuid, this class is a wrapper class.  It wraps longs for interface methods that accept null (for example }{\f1\fs20\insrsid7887376\charrsid8158488 ICaptureGraph
Builder2}{\f1\fs20\insrsid7887376 .}{\f1\fs20\insrsid7887376\charrsid8158488 ControlStream}{\f1\fs20\insrsid7887376 ).}{\f1\fs20\insrsid7887376 
\par }{\f1\fs20\insrsid11808738 DsRect \endash  As with DsGuid, this class is a wrapper class.  It wraps }{\f1\fs20\insrsid12003006 the Win32 RECT structure.}{\f1\fs20\insrsid11808738 
\par }{\b\f1\fs20\insrsid7887376\charrsid32378 DsResults}{\f1\fs20\insrsid7887376  \endash  This class consists of DirectShow specific error and status codes.  It }{\f1\fs20\insrsid7563147 is based on}{\f1\fs20\insrsid7887376 
 vfwmsgs.h.  Note that it does NOT include regular COM error codes such as might be found in winerror.h.  These codes can be used to check for known error conditions:
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid7887376 {\f2\fs20\insrsid7887376 hr = iSomething.DoSomething();
\par }{\f2\fs20\cf2\insrsid7887376 if}{\f2\fs20\insrsid7887376  (hr == DsResults.E_NotConnected)
\par    }{\f2\fs20\cf11\insrsid7887376 // Try connecting
\par }\pard \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid7887376 {\b\f1\fs20\insrsid7887376\charrsid32378 DsError}{\f1\fs20\insrsid7887376  \endash  This class contains two methods.  
\par }{\f1\fs20\insrsid7887376\charrsid32378 ThrowExceptionForHR}{\f1\fs20\insrsid7887376  is a wrapper for Marshal.ThrowExceptionForHR, but additionally provides }{\f1\fs20\insrsid7563147 descriptions for }{\f1\fs20\insrsid7887376 
any DirectShow specific error messages.}{\f1\fs20\insrsid15950545   Note that you do not have to check for negative values before calling this method.  If the hr value is not a fatal error, no exception will be thrown:}{\f1\fs20\insrsid7887376 
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0\pararsid15950545 {\f2\fs20\insrsid15950545 hr = iSomething.DoSomething();
\par DsError.ThrowExceptionForHR(hr);
\par 
\par }\pard \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid7887376 {\f1\fs20\insrsid7887376\charrsid32378 AMGetErrorText}{\f1\fs20\insrsid7887376  map}{\f1\fs20\insrsid12326379 s}{\f1\fs20\insrsid7887376 
 the DirectShow function of the same name to retrieve DirectShow error code text.}{\f1\fs20\insrsid7887376 
\par }{\f1\fs20\insrsid12326379\charrsid12326379 GetErrorText}{\f1\fs20\insrsid12326379  is a wrapper for AMGetErrorText that returns a string.}{\f1\fs20\insrsid12326379\charrsid12326379 
\par }{\b\f1\fs20\insrsid7887376\charrsid5781541 DsUtils}{\f1\fs20\insrsid7887376  \endash  This class contains three methods:
\par }{\f1\fs20\insrsid7887376\charrsid5781541 FreeAMMediaType}{\f1\fs20\insrsid7887376  \endash 
 This method should be called to release any AMMediaType structures.  Do not depend on the Garbage Collector to correctly release AMMediaType structures.  It is the .NET implementation of the MSDN }{\f1\fs20\insrsid7563147 function }{
\f1\fs20\insrsid7887376\charrsid5781541 DeleteMediaType}{\f1\fs20\insrsid7563147 ()}{\f1\fs20\insrsid7887376 .
\par }{\f1\fs20\insrsid7887376\charrsid5781541 FreePinInfo}{\f1\fs20\insrsid7887376  \endash  This method should be called to release any PinInfo structures. Do not depend on the Garbage Collector to correctly release PinInfo structures.
\par }{\f1\fs20\insrsid7887376\charrsid10842059 Guid}{\f1\fs20\insrsid7887376  }{\f1\fs20\insrsid7887376\charrsid10842059 GetPinCategory(IPin pPin)}{\f1\fs20\insrsid7887376  \endash  This method returns the Guid (usually a member of }{
\f1\fs20\insrsid7887376\charrsid10842059 PinCategory}{\f1\fs20\insrsid7887376 ) that tells the category of the pin: Capture, Preview, etc.
\par }{\b\f1\fs20\insrsid7887376\charrsid10842059 DsROTEntry}{\f1\fs20\insrsid7887376  \endash  This class is }{\f1\fs20\insrsid11603567 primarily}{\f1\fs20\insrsid7887376 
 useful in debugging.  When building a graph it is very useful to be able to see what filters have been added to the graph, and how they are connected.  The MS Platform SDK contains a utility named GraphEdit that }{\f1\fs20\insrsid7563147 
visually displays filter graphs.  It }{\f1\fs20\insrsid7887376 can connect to graphs in other applications that have placed their FilterGraph in the Running Object Table (ROT).  }{\f1\fs20\insrsid7563147 
An application can put its FilterGraph in the ROT with}{\f1\fs20\insrsid7887376 :
\par }{\f1\fs20\insrsid3877049    }{\f2\fs20\insrsid7887376\charrsid3877049 DsROTEntry m_rot = new DsRot}{\f2\fs20\insrsid3877049 Entry}{\f2\fs20\insrsid7887376\charrsid3877049 (filtergraph);
\par }{\f1\fs20\insrsid7887376 Having done this, you can use the \'93File/Connect to Remote Graph\'94 }{\f1\fs20\insrsid7563147 in GraphEdit }{\f1\fs20\insrsid7887376 
to see the graph.  The DsROTEntry class supports Dispose to release the entry when it is no longer }{\f1\fs20\insrsid7563147 needed}{\f1\fs20\insrsid7887376 .
\par }{\b\f1\fs20\insrsid7887376\charrsid6037321 DsDevice}{\f1\fs20\insrsid7887376  \endash  This class allows for the enumeration of system resources such as Video Capture cards, Audio Capture cards, Compressors, etc (see the }{
\f1\fs20\insrsid7887376\charrsid6037321 FilterCategory}{\f1\fs20\insrsid7887376  class for a list of what can be enumerated).}{\f1\fs20\insrsid12003006   The Moniker for the device is returned by the Mon property.  This is useful for methods such as }{
\f1\fs20\insrsid12003006\charrsid12003006 IFilterGraph2}{\f1\fs20\insrsid12003006 .}{\f1\fs20\insrsid12003006\charrsid12003006 AddSourceFilterForMoniker}{\f1\fs20\insrsid12003006 .  The human readable name is returned in the 
Name property.  The DevicePath returns a unique identifier for the device allowing you to distinguish between two instance of the same hardware.}{\f1\fs20\insrsid5074900\charrsid12003006 
\par }\pard \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid11603567 {\f1\fs20\insrsid6041525 static }{\f1\fs20\insrsid6041525\charrsid6041525 DsDevice[]}{\f1\fs20\insrsid6041525  }{\f1\fs20\insrsid6041525\charrsid6041525 GetDevicesOfCat(}{
\f1\fs20\insrsid6041525 Guid Category}{\f1\fs20\insrsid6041525\charrsid6041525 )}{\f1\fs20\insrsid6041525 ; - Use this}{\f1\fs20\insrsid7887376  static }{\f1\fs20\insrsid6041525 method }{\f1\fs20\insrsid7887376 
to return an array of the desired resource, then use the Name and Mon (moniker) properties to manipulate the resource.  See Samples\\}{\f1\fs20\insrsid7887376\charrsid6037321 Capture\\PlayCap}{\f1\fs20\insrsid7887376  or Samples\\}{
\f1\fs20\insrsid7887376\charrsid6037321 Misc\\DxWebCam\\Service}{\f1\fs20\insrsid7887376  for examples of how this is done.}{\f1\fs20\insrsid5074900 
\par }\pard \ql \fi450\li0\ri0\sb100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid3877049 {\f2\fs20\insrsid5074900\charrsid3877049 DsDevice[] capDev;
\par }\pard \ql \fi450\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid3877049 {\f2\fs20\insrsid5074900\charrsid3877049 
\par // Get the collection of video devices
\par capDev = DsDevice.GetDevicesOfCat(FilterCategory.VideoInputDevice);
\par }{\f2\fs20\insrsid11603567\charrsid3877049 foreach (DsDevice d in }{\f2\fs20\insrsid15220984\charrsid3877049 capDev}{\f2\fs20\insrsid11603567\charrsid3877049 )}{\f2\fs20\insrsid11603567 
\par }{\f2\fs20\insrsid11018642 \{}{\f2\fs20\insrsid11018642\charrsid3877049 
\par }\pard \ql \fi450\li720\ri0\nowidctlpar\faauto\rin0\lin720\itap0\pararsid3877049 {\f2\fs20\insrsid5074900\charrsid3877049 // Build a list of devices for the user to choose from using d.Name}{\f2\fs20\insrsid11603567 
\par }\pard \ql \fi450\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid11018642 {\f2\fs20\insrsid11018642 \}}{\f2\fs20\insrsid11018642\charrsid3877049 
\par }\pard \ql \fi450\li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid3877049 {\f2\fs20\insrsid5074900\charrsid3877049 
\par }\pard \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid7887376 {\b\f1\fs20\insrsid7887376\charrsid6037321 DsFindPin }{\f1\fs20\insrsid7887376 \endash  This class provides several methods of returning pins on an IBaseFilter.
\par }{\f1\fs20\insrsid7887376\charrsid6037321 IPin ByDirection(IBaseFilter vSource, PinDirection vDir, int iIndex)}{\f1\fs20\insrsid7887376  \endash  Scans an IBaseFilter looking for a pin in the specified direction (Input o
r Output), starting at the specified zero-based index.
\par }{\f1\fs20\insrsid7887376\charrsid6037321 IPin ByName(IBaseFilter vSource, string vPinName)}{\f1\fs20\insrsid7887376  \endash  Scans an IBaseFilter looking for a pin with the specified name.
\par }{\f1\fs20\insrsid7887376\charrsid6037321 IPin ByCategory(IBaseFilter vSource, Guid guidPinCat, int iIndex)}{\f1\fs20\insrsid7887376  \endash  Scans an IBaseFilter looking for a pin with the specified category (usually a member of }{
\f1\fs20\insrsid7887376\charrsid6037321 PinCategory}{\f1\fs20\insrsid7887376 ), starting at the specified zero-based index.
\par }{\f1\fs20\insrsid7887376\charrsid6037321 IPin ByConnectionStatus(IBaseFilter vSource, PinConnectedStatus vStat, int iIndex)}{\f1\fs20\insrsid7887376  \endash  Scans an IBaseFilter looking for a pin wit
h the specified status (Connect or Not Connected) starting at the specified zero-based index.
\par }{\b\f1\fs20\insrsid7887376\charrsid13446123 DsToString}{\f1\fs20\insrsid7887376  \endash }{\f1\fs20\insrsid3218881  }{\f1\fs20\insrsid7887376 This class turns }{\f1\fs20\insrsid3218881 mediatype }{\f1\fs20\insrsid7887376 structures }{
\f1\fs20\insrsid3218881 and Guids }{\f1\fs20\insrsid7887376 into human readable strings.
\par }{\f1\fs20\insrsid7887376\charrsid13446123 AMMediaTypeToString}{\f1\fs20\insrsid7887376  \endash  Produces a human readable form of an AMMediaType
\par }{\f1\fs20\insrsid7887376\charrsid13446123 MediaTypeToString}{\f1\fs20\insrsid7887376  \endash  Produces a human readable form of a MediaType
\par }{\f1\fs20\insrsid7887376\charrsid13446123 MediaSubTypeToString}{\f1\fs20\insrsid7887376  \endash  Produces a human readable form of a MediaSubType
\par }{\f1\fs20\insrsid7887376\charrsid13446123 MediaFormatTypeToString}{\f1\fs20\insrsid7887376  \endash  Produces a human readable form of a MediaFormatType
\par }{\b\f1\fs20\insrsid7887376\charrsid2497976 DsMarshaler, EMTMarshaler, DTAMarshaler, DKAMarshaler}{\f1\fs20\insrsid7887376  \endash 
 These classes are used internally to marshal parameters to and from the COM interfaces.  There should be no reason to call them directly, and are mentioned here only for completeness.  The abstract class DsMarshaler might be of interest to 
someone who is writing their own custom marshaler.}{\f1\fs20\insrsid7887376\charrsid2497976 
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid15286429\charrsid2829749 Samples
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid15286429 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid15286429 
There are a number of samples included to show how to perform various common tasks.  Note that these samples should not be considered commercial quality, but can form the basis of your own code.
\par }\pard \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid6562733 {\b\f1\fs20\insrsid15286429\charrsid9589650 Samples\\Capture\\DxLogo}{\f1\fs20\insrsid6562733  - }{\f1\fs20\insrsid6562733\charrsid6562733 
A sample application showing how to superimpose a logo on a data stream. It uses a capture device for the video source, and outputs the result to a file.}{\f1\fs20\insrsid15286429\charrsid6562733 
\par }{\b\f1\fs20\insrsid15286429\charrsid9589650 Samples\\Capture\\DxLogoVB}{\f1\fs20\insrsid6562733  - }{\f1\fs20\insrsid6562733\charrsid6562733 This is precisely the same sample as DxLogo, except that it's written in V}{\f1\fs20\insrsid2652793 isual }{
\f1\fs20\insrsid6562733\charrsid6562733 B}{\f1\fs20\insrsid2652793 asic}{\f1\fs20\insrsid6562733\charrsid6562733 . Other than the tediousness of converting C# to V}{\f1\fs20\insrsid2652793 B, this was a trivial exercise.}{
\f1\fs20\insrsid15286429\charrsid6562733 
\par }{\b\f1\fs20\insrsid15286429\charrsid9589650 Samples\\Capture\\DxSnap}{\f1\fs20\insrsid6562733  - }{\f1\fs20\insrsid6562733\charrsid6562733 Use DirectShow to take snapshots from the Still pin of a capture
 device.  Note the MS encourages you to use WIA for this, but if you want to do in with DirectShow and C#, here's how.}{\f1\fs20\insrsid15286429\charrsid6562733 
\par }{\b\f1\fs20\insrsid15286429\charrsid9589650 Samples\\Capture\\DxText}{\f1\fs20\insrsid6562733  - }{\f1\fs20\insrsid6562733\charrsid6562733 A sample application showing how to superimpose text strings on a}{\f1\fs20\insrsid6562733  }{
\f1\fs20\insrsid6562733\charrsid6562733 datastream.  The stream is read from an avi file.}{\f1\fs20\insrsid15286429\charrsid6562733 
\par }{\b\f1\fs20\insrsid15286429\charrsid9589650 Samples\\Capture\\PlayCap}{\f1\fs20\insrsid6562733  - }{\f1\fs20\insrsid6562733\charrsid6562733 A translation of the DirectShow PlayCap program to show how this would}{\f1\fs20\insrsid6562733  }{
\f1\fs20\insrsid6562733\charrsid6562733 appear in c#.
\par This application creates a preview window for the first video capture device that it locates on the user's system (if any). It demonstrates a simple example of using the ICaptureGraphBuilder2 and ICreateDevEnum interfaces to build a capture graph.}{
\f1\fs20\insrsid15286429 
\par }{\b\f1\fs20\insrsid11808738\charrsid11808738 Samples\\Capture\\CapWMV}{\f1\fs20\insrsid11808738  \endash  Capture from video capture devices to WMV files.
\par }{\b\f1\fs20\insrsid11808738\charrsid11808738 Samples\\Capture\\DxPropPages}{\f1\fs20\insrsid11808738  \endash  Show how to add compression filters to video capture, and show how to invoke the property pages for capture devices, and video compressors.

\par }{\b\f1\fs20\insrsid11808738\charrsid11808738 Samples\\Capture\\DxTuner}{\f1\fs20\insrsid11808738  \endash  Shows how to capture from TV Tuners, including how to change channels.}{\f1\fs20\insrsid11808738\charrsid11808738 
\par }\pard \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid15286429 {\b\f1\fs20\insrsid15286429\charrsid9589650 Samples\\Editing\\DxScan}{\f1\fs20\insrsid6562733  - }{\f1\fs20\insrsid6562733\charrsid6562733 
A sample application scanning a media file looking for black frames}{\f1\fs20\insrsid6562733 .}{\f1\fs20\insrsid15286429\charrsid6562733 
\par }\pard \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid6562733 {\b\f1\fs20\insrsid15286429\charrsid9589650 Samples\\Misc\\DxWebCam}{\f1\fs20\insrsid6562733  - }{\f1\fs20\insrsid6562733\charrsid6562733 A poo
r man's web cam program. This application runs as a Win32 Service.  It takes the output of a capture graph, turns it into a stream of JPEG files, and sends it thru TCP/IP to a client application.}{\f1\fs20\insrsid15286429\charrsid6562733 
\par }{\b\f1\fs20\insrsid15286429\charrsid9589650 Samples\\Players\\DxPlay}{\f1\fs20\insrsid6562733  - }{\f1\fs20\insrsid6562733\charrsid6562733 A sample application showing how to play media files (AVI, WMV, etc) and capture snapshots.}{
\f1\fs20\insrsid15286429\charrsid6562733 
\par }{\b\f1\fs20\insrsid15286429\charrsid9589650 Samples\\Players\\PlayWnd}{\f1\fs20\insrsid6562733  - }{\f1\fs20\insrsid6562733\charrsid6562733 A translation of the DirectShow PlayWnd program to show how this would}{\f1\fs20\insrsid6562733  }{
\f1\fs20\insrsid6562733\charrsid6562733 appear in }{\f1\fs20\insrsid9589650 C}{\f1\fs20\insrsid6562733\charrsid6562733 #.
\par PlayWnd is a simple media player application with a minimal user interface.}{\f1\fs20\insrsid15286429 
\par }{\b\f1\fs20\insrsid11808738\charrsid11808738 Samples\\Players\\DvdPlay}{\f1\fs20\insrsid11808738  \endash  A bare-bones sample showing how to play DVDs with DirectShow.
\par }\pard \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid1904095 {\b\f1\fs20\insrsid11808738\charrsid11808738 Samples\\VMR9\\VMR9Allocator}{\f1\fs20\insrsid1904095  - }{\f1\fs20\insrsid1904095\charrsid1904095 
A translation of the DirectShow VMR9Allocator program to show how this would}{\f1\fs20\insrsid1904095  }{\f1\fs20\insrsid1904095\charrsid1904095 appear in c#.}{\f1\fs20\insrsid11808738\charrsid1904095 
\par }\pard \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid6562733 {\b\f1\fs20\insrsid7486901\charrsid7486901 Samples\\VMR9\\BitMapMixer }{\f1\fs20\insrsid7486901\charrsid7486901 - }{\f1\fs20\insrsid1904095\charrsid1904095 
BitmapMixer is an example of how to draw things over a video using VMR9.}{\f1\fs20\insrsid7486901\charrsid1904095 
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2845617\charrsid2829749 
{\*\bkmkstart _Ref106788191}Using untested interfaces{\*\bkmkend _Ref106788191}
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid2845617\charrsid2829749 The DirectShowLib contains interfaces for virtually all of DirectShow (}{
\f1\fs20\insrsid7614624 ~360 }{\f1\fs20\insrsid2845617\charrsid2829749 interfaces).  Currently, however, only about }{\f1\fs20\insrsid7614624 10}{\f1\fs20\insrsid7614624\charrsid2829749 0 }{\f1\fs20\insrsid2845617\charrsid2829749 interfaces
 have been tested.  Testing includes performing each of these on each method of the interface:
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid7887376 {\f1\fs20\insrsid2845617\charrsid2829749 1) Checking to see that the method is defined correctly according to the MSDN docs
\par 2) Change int to enum where needed
\par 3) Add any needed MarshalAs
\par 4) Verify that any needed structs are correctly defined 
\par 5) Remove unneeded "ref", add needed "out"
\par 6) (Where possible) remove IntPtr and use actual structs}{\f1\fs20\insrsid5571757  or classes}{\f1\fs20\insrsid2845617\charrsid2829749 
\par 7) Where necessary, create custom marshalers for passing structs
\par 8) Write code that calls the method, making sure that parameters that are documented to accept null, do so
\par }\pard \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\insrsid2845617\charrsid2829749 When 1-8 have been done for all the methods in an interface, the work is submitted t
o a second developer for review.  When reviewed, the interface is considered tested.
\par However, it may be that you need to use an interface that hasn't been tested yet.  All the untested }{\f1\fs20\insrsid15932462 interfaces, structs and enum are}{\f1\fs20\insrsid2845617\charrsid2829749  included in the source, but are wrapped within:

\par }\pard \ql \fi360\li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid3877049 {\f2\fs20\insrsid2845617\charrsid3877049 #if ALLOW_UNTESTED_INTERFACES
\par #endif
\par }\pard \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\insrsid2845617\charrsid2829749 Release builds of our library do not expose these }{\f1\fs20\insrsid15932462 interfaces}{\f1\fs20\insrsid2845617\charrsid2829749 
.  If you want to enable all the methods, you can use #define in specific source files or globally with project properties to define th}{\f1\fs20\insrsid15932462 is constant}{\f1\fs20\insrsid2845617\charrsid2829749 , t
hen build your own copy of the library.  However, don't be surprised if some of the methods/interfaces that haven't been tested don't work correctly.  Also, when we eventually do test the method, we may }{\f1\fs20\insrsid15932462 modify the declaration.}{
\insrsid2845617\charrsid2829749 
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2845617\charrsid2829749 
{\*\bkmkstart _Ref106788227}The plan for additional interfaces{\*\bkmkend _Ref106788227}
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid2845617\charrsid2829749 
The current plan calls for testing most of the DirectShow interfaces.  No, not all of them.  Some interfaces are deprecated}{\f1\fs20\insrsid3149574  or undocumented}{\f1\fs20\insrsid2845617\charrsid2829749 
, some are not meant to be called from applications.  }{\f1\fs20\insrsid5571757 If there is some particular interface you want to see added, consider volunteering to test it.}{\f1\fs20\insrsid2845617 
\par }{\f1\fs20\insrsid283711 To be informed of }{\f1\fs20\insrsid12737063 fixes and }{\f1\fs20\insrsid283711 updates}{\f1\fs20\insrsid12737063  to the library}{\f1\fs20\insrsid283711 , subscribe to the }{\f1\fs20\insrsid283711\charrsid283711 
directshownet-announce}{\f1\fs20\insrsid283711  list at }{\field{\*\fldinst {\f1\fs20\insrsid283711  HYPERLINK "}{\f1\fs20\insrsid283711\charrsid283711 http://sourceforge.net/mail/?group_id=136334}{\f1\fs20\insrsid283711 " }{
\f1\fs20\insrsid16410145\charrsid7876934 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000002d00000068007400740070003a002f002f0073006f00750072006300650066006f007200670065002e006e00650074002f006d00610069006c002f003f00670072006f00750070005f00690064003d003100330036003300330034000000e0c9ea79f9bace11
8c8200aa004ba90b5a00000068007400740070003a002f002f0073006f00750072006300650066006f007200670065002e006e00650074002f006d00610069006c002f003f00670072006f00750070005f00690064003d0031003300360033003300340000000000002000000000}}}{\fldrslt {
\cs15\f1\fs20\ul\cf2\insrsid283711\charrsid7876934 http://sourceforge.net/mail/?group_id=136334}}}{\f1\fs20\insrsid283711 .}{\f1\fs20\insrsid283711\charrsid283711 
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2845617\charrsid2829749 Reporting bugs
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid12675304 Bugs in this library should be reported to }{\field{\*\fldinst {\f1\fs20\insrsid12675304 
 HYPERLINK "}{\f1\fs20\insrsid12675304\charrsid12675304 http://sourceforge.net/tracker/?group_id=136334&atid=735691}{\f1\fs20\insrsid12675304 " }{\f1\fs20\insrsid16410145\charrsid10515867 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000003c00000068007400740070003a002f002f0073006f00750072006300650066006f007200670065002e006e00650074002f0074007200610063006b00650072002f003f00670072006f00750070005f00690064003d0031003300360033003300340026006100
7400690064003d003700330035003600390031000000e0c9ea79f9bace118c8200aa004ba90b7800000068007400740070003a002f002f0073006f00750072006300650066006f007200670065002e006e00650074002f0074007200610063006b00650072002f003f00670072006f00750070005f00690064003d00310033
003600330033003400260061007400690064003d0037003300350036003900310000000000000000000000000000000000000000}}}{\fldrslt {\cs15\f1\fs20\ul\cf2\insrsid12675304\charrsid10515867 http://sourceforge.net/tracker/?group_id=136334&atid=735691}}}{
\f1\fs20\insrsid12675304 .}{\f1\fs20\insrsid2845617 
\par }{\f1\fs20\insrsid12675304 Note that only bugs in the library, samples, or docs that are part of this project should be reported here.  Bugs in DirectShow itself }{\f1\fs20\insrsid3160347 must be reported to Microsoft.}{
\f1\fs20\insrsid12675304\charrsid12675304 
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid6771254 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid6771254\charrsid2829749 Links for help
\par }\pard\plain \ql \li0\ri0\sb100\sa100\nowidctlpar\faauto\rin0\lin0\itap0\pararsid6771254 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid6771254\charrsid3885712 Your best place to start is the MSDN docs (see links under "}
{\field\flddirty{\*\fldinst {\f1\fs20\insrsid6771254\charrsid3885712  REF _Ref106788285 \\h }{\f1\fs20\insrsid16410145\charrsid3885712 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0052006500660031003000360037003800380032003800350000000000000000000000000000}}{\f1\fs20\insrsid3885712\charrsid3885712  \\* MERGEFORMAT }}{\fldrslt {\f1\fs20\insrsid6771254\charrsid3885712 
Where to find the documentation}}}{\f1\fs20\insrsid6771254\charrsid3885712 ").  If your question is about DirectShow in general, you might want to post to one of Microsoft's newsgroups (currently at }{\field\flddirty{\*\fldinst {
\f1\fs20\insrsid6771254\charrsid3885712  HYPERLINK "http://msdn.microsoft.com/newsgroups/topic.aspx?url=/msdn-files/028/201/114/topic.xml" }{\f1\fs20\insrsid16410145\charrsid3885712 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90bac00000068007400740070003a002f002f006d00730064006e002e006d006900630072006f0073006f00660074002e0063006f006d002f006e00650077007300670072006f007500700073002f0074006f0070006900
63002e0061007300700078003f00750072006c003d002f006d00730064006e002d00660069006c00650073002f003000320038002f003200300031002f003100310034002f0074006f007000690063002e0078006d006c0000000000000000000000000000000000000000}}}{\fldrslt {
\cs15\f1\fs20\ul\cf2\insrsid6771254\charrsid3885712 http://msdn.microsoft.com/newsgroups/topic.aspx?url=/msdn-files/028/201/114/topic.xml}}}{\f1\fs20\insrsid6771254\charrsid3885712 
).  If your question is specific to this library, you should post your question post in the \'93Open Discussion\'94 forum here: }{\field\flddirty{\*\fldinst {\f1\fs20\insrsid6771254\charrsid3885712  HYPERLINK "http://sou
rceforge.net/forum/forum.php?forum_id=460697" }{\f1\fs20\insrsid16410145\charrsid3885712 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000003700000068007400740070003a002f002f0073006f00750072006300650066006f007200670065002e006e00650074002f0066006f00720075006d002f0066006f00720075006d002e007000680070003f0066006f00720075006d005f00690064003d003400
360030003600390037000000e0c9ea79f9bace118c8200aa004ba90b6e00000068007400740070003a002f002f0073006f00750072006300650066006f007200670065002e006e00650074002f0066006f00720075006d002f0066006f00720075006d002e007000680070003f0066006f00720075006d005f00690064003d
00340036003000360039003700000000004f0000000000000000000000000000}}}{\fldrslt {\cs15\f1\fs20\ul\cf2\insrsid6771254\charrsid3885712 http://sourceforge.net/forum/forum.php?forum_id=460697}}}{\f1\fs20\insrsid6771254\charrsid3885712 .
\par }\pard\plain \s3\ql \li0\ri0\sb240\sa60\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0\pararsid10703373 \b\f1\fs26\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2845617\charrsid2829749 Offering to help
\par }\pard\plain \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1\fs20\insrsid2845617\charrsid2829749 
There are still a number of interfaces left to test.  If you would like to help, please contact on}{\f1\fs20\insrsid3160347 e of the project administrators}{\f1\fs20\insrsid2845617\charrsid2829749  at }{\field{\*\fldinst {\f1\fs20\insrsid15932462 
 HYPERLINK "http://sourceforge.net/projects/directshownet/" }{\f1\fs20\insrsid16410145\charrsid15932462 {\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b5e00000068007400740070003a002f002f0073006f00750072006300650066006f007200670065002e006e00650074002f00700072006f006a0065006300740073002f00640069007200650063007400730068006f00
77006e00650074002f00000000000000000000000000000000000000}}}{\fldrslt {\cs15\f1\fs20\ul\cf2\insrsid2845617\charrsid15932462 http://sourceforge.net/projects/directshownet/}}}{\f1\fs20\insrsid2845617\charrsid2829749 .
\par }}