using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace DirectShowLib.Test
{
	public class IFilterGraphTest
	{
    private IFilterGraph filterGraph = null;
    private IBaseFilter sourceFilter = null;
    private IBaseFilter aviSplitter = null;

		public IFilterGraphTest()
		{
		}

    public void DoTests()
    {
      this.filterGraph = (IFilterGraph) new FilterGraph();

      try
      {
        TestAddFilter();
        TestEnumFilters();
        TestFindFilterByName();
        TestConnectDirect();
        TestReconnect();
        TestDisconnect();
        TestSetDefaultSyncSource();
        TestRemoveFilter();
      }
      finally
      {
        Marshal.ReleaseComObject(this.aviSplitter);
        Marshal.ReleaseComObject(this.sourceFilter);
        Marshal.ReleaseComObject(this.filterGraph);
      }
    }

    public void TestAddFilter()
    {
      int hr = 0;
      
      this.sourceFilter = (IBaseFilter) new AsyncReader();

      // this method allow null parameter (name is generated by the GraphBuilder)
      hr = this.filterGraph.AddFilter(this.sourceFilter, null);
      Marshal.ThrowExceptionForHR(hr);
      Debug.Assert(hr == 0, "IFilterGraph.AddFilter");

      ConfigSourceFilter((IFileSourceFilter)this.sourceFilter);

      this.aviSplitter = (IBaseFilter) new AviSplitter();

      hr = this.filterGraph.AddFilter(this.aviSplitter, "AVI Splitter");
      Marshal.ThrowExceptionForHR(hr);
      Debug.Assert(hr == 0, "IFilterGraph.AddFilter");
    }

    public void TestEnumFilters()
    {
      int hr = 0;
      IEnumFilters enumFilters = null;

      hr = this.filterGraph.EnumFilters(out enumFilters);
      Marshal.ThrowExceptionForHR(hr);

      Debug.Assert(enumFilters != null, "IFilterGraph.EnumFilters");

      Marshal.ReleaseComObject(enumFilters);
    }

    public void TestFindFilterByName()
    {
      int hr = 0;
      IBaseFilter filter = null;

      // try to find AVI Splitter filter added in TestAddFilter()
      hr = this.filterGraph.FindFilterByName("AVI Splitter", out filter);
      Marshal.ThrowExceptionForHR(hr);

      Debug.Assert(hr == 0, "IFilterGraph.FindFilterByName");
      Marshal.ReleaseComObject(filter);

      // try to find a no existing filter
      hr = this.filterGraph.FindFilterByName("AZERTY", out filter);
      //Marshal.ThrowExceptionForHR(hr);

      // filter sould be null
      Debug.Assert(filter == null, "IFilterGraph.FindFilterByName");
    }

    public void TestConnectDirect()
    {
      int hr = 0;
      IPin pinOut = null;
      IPin pinIn = null;

      // try to connect source filter with avi splitter
      pinOut = DsFindPin.ByDirection(this.sourceFilter, PinDirection.Output, 0);
      pinIn = DsFindPin.ByDirection(this.aviSplitter, PinDirection.Input, 0);

      hr = this.filterGraph.ConnectDirect(pinOut, pinIn, null);
      Marshal.ThrowExceptionForHR(hr);
      Debug.Assert(hr == 0, "IFilterGraph.ConnectDirect");

      Marshal.ReleaseComObject(pinIn);
      Marshal.ReleaseComObject(pinOut);
    }

    public void TestReconnect()
    {
      int hr = 0;
      IPin pinOut = null;

      // try to reconnect source filter with avi splitter
      pinOut = DsFindPin.ByDirection(this.sourceFilter, PinDirection.Output, 0);

      hr = this.filterGraph.Reconnect(pinOut);
      Marshal.ThrowExceptionForHR(hr);
      Debug.Assert(hr == 0, "IFilterGraph.Reconnect");

      Marshal.ReleaseComObject(pinOut);
    }

    public void TestDisconnect()
    {
      int hr = 0;
      IPin pinOut = null;

      // try to disconnect source filter with avi splitter
      pinOut = DsFindPin.ByDirection(this.sourceFilter, PinDirection.Output, 0);

      hr = this.filterGraph.Disconnect(pinOut);
      Marshal.ThrowExceptionForHR(hr);
      Debug.Assert(hr == 0, "IFilterGraph.Disconnect");

      Marshal.ReleaseComObject(pinOut);
    }

    public void TestSetDefaultSyncSource()
    {
      int hr = 0;

      // Could do nothing except test the return value...
      hr = this.filterGraph.SetDefaultSyncSource();
      Debug.Assert(hr == 0, "IFilterGraph.SetDefaultSyncSource");
    }

    public void TestRemoveFilter()
    {
      int hr = 0;

      // try to remove filter added in TestAddFilter()
      hr = this.filterGraph.RemoveFilter(this.sourceFilter);
      Marshal.ThrowExceptionForHR(hr);
      Debug.Assert(hr == 0, "IFilterGraph.RemoveFilter");
    }

    private void ConfigSourceFilter(IFileSourceFilter filter)
    {
      int hr = 0;

      // Requiered to connect with the avi splitter
      hr = filter.Load("foo.avi", null);
      Marshal.ThrowExceptionForHR(hr);
    }

	}
}
